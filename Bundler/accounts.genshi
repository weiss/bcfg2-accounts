<?python
  from genshi.template import TemplateError

  # Configuration
  default_shell = '/bin/sh'
  key_directory = '/var/lib/bcfg2/keys'

  key_group = dict()
  desired = {
    'user': dict(),
    'group': dict()
  }
  existing = {
    'user': dict(),
    'group': dict()
  }
  remove = {
    'user': dict(),
    'group': dict()
  }

  def matches_me(container):
    if container.tag == 'Group':
      negate = container.get('negate', 'false').lower() == 'true'
      return metadata.inGroup(container.get('name')) ^ negate
    elif container.tag == 'Client':
      negate = container.get('negate', 'false').lower() == 'true'
      return (container.get('name') == metadata.hostname) ^ negate
    return False

  def todo(kind, name):
    if name not in existing[kind]:
      return 'add'
    for key in existing[kind][name]:
      if existing[kind][name][key] != desired[kind][name][key]:
        return 'mod'

  def key_files(group):
    try:
      elements = key_group[group]
    except KeyError:
      raise TemplateError, 'Key group "%s" is not defined' % group
    file_names = list()
    for el in elements:
      if el.tag == 'PubKey':
        file_names.append(el.get('file'))
      elif el.tag == 'KeyGroup':
        file_names.extend(key_files(el.get('name')))
    return file_names

  def auth_keys(group):
    keys = ['#', '# Automatically created by Bcfg2.', '#']
    for file in key_files(group):
      path = key_directory + '/' + file
      try:
        f = open(path)
        keys.append(f.read().rstrip('\n'))
        f.close()
      except IOError, (errno, strerror):
        raise TemplateError, 'Cannot read %s: %s' % (path, strerror)
    return '\n'.join(keys) + '\n'

  def parse_keys(elements):
    for el in elements:
      if el.tag == 'KeyGroup':
        key_group[el.get('name')] = el
      elif matches_me(el):
        parse_keys(el)

  def parse_accounts(elements):
    for el in elements:
      if el.tag == 'UnixUser':
        base_dir = '/' if el.get('name') == 'root' else '/home/'
        user = {
          'uid': el.get('uid'),
          'gid': el.get('gid', el.get('uid')),
          'group': el.get('group', el.get('name')),
          'gecos': el.get('gecos', el.get('name').capitalize()),
          'home': el.get('home', base_dir + el.get('name')),
          'shell': el.get('shell', default_shell),
          'extra_groups': ','.join(sorted(el.get('extra_groups', '').split())),
          'key_group': el.get('key_group')
        }
        desired['group'][user['group']] = {
          'gid': user['gid']
        }
        desired['user'][el.get('name')] = user
      elif el.tag == 'UnixGroup':
        desired['group'][el.get('name')] = {
          'gid': el.get('gid')
        }
      elif matches_me(el):
        parse_accounts(el)

  for line in metadata.Probes['accounts'].splitlines():
    fields = line.split(':')
    if fields[0] == 'U':
      existing['user'][fields[1]] = {
        'uid': fields[2],
        'group': fields[3],
        'gecos': fields[4],
        'home': fields[5],
        'shell': fields[6],
        'extra_groups': ','.join(sorted(fields[7].split()))
      }
    elif fields[0] == 'G':
      existing['group'][fields[1]] = {
        'gid': fields[2]
      }

  accounts_xml = metadata.Properties['accounts.xml'].xdata
  try:
    keys_xml = metadata.Properties['keys.xml'].xdata
  except KeyError:
    keys_xml = list()

  parse_accounts(accounts_xml)
  parse_keys(keys_xml)

  euids = {}  # map of uid -> username used to index into existing
  # check if desired uid is already in use
  for euser in existing['user']:
    euids[existing['user'][euser]['uid']] = euser

  for duser in desired['user']:
    duid = desired['user'][duser]['uid']
    if duid in euids \
      and duser not in existing['user']:
      """
      If we get here, it means that the desired user's uid already exists
      on the client but the username doesn't match what's on the client.

      In this case, we want to remove the existing user and create a new
      user with the old uid.
      """
      remove['user'][euids[duid]] = existing['user'][euids[duid]]

?>

<Bundle name="accounts" xmlns:py="http://genshi.edgewall.org/">

  <!-- The numbers in the Action names are used to enforce ordering when
       the configuration is sent to the client. -->
  <py:for each="name in remove.user.keys()">
    <BoundAction name="1userdel $name"
     timing="pre"
     when="always"
     status="check"
     command="/usr/sbin/userdel '$name'"/>
  </py:for>
  <py:for each="name in remove.group.keys()">
    <BoundAction name="2groupdel $name"
     timing="pre"
     when="always"
     status="check"
     command="/usr/sbin/groupdel '$name'"/>
  </py:for>

  <py:for each="(name, group) in desired.group.items()">
    <py:with vars="action = todo('group', name)">
      <py:if test="action is not None">
        <BoundAction
         name="3group$action $name"
         timing="pre"
         when="always"
         status="check"
         command="/usr/sbin/group$action
          -g '$group.gid'
             '$name'"/>
      </py:if>
    </py:with>
  </py:for>

  <py:for each="(name, user) in desired.user.items()">
    <py:with vars="action = todo('user', name)">
      <py:if test="action is not None">
        <BoundAction
         name="4user$action $name"
         timing="pre"
         when="always"
         status="check"
         command="/usr/sbin/user$action
          -m
          -u '$user.uid'
          -g '$user.group'
          -G '$user.extra_groups'
          -d '$user.home'
          -s '$user.shell'
          -c '$user.gecos'
             '$name'"/>
      </py:if>
    </py:with>

    <py:if test="user.key_group is not None">
      <BoundPath
       type="directory"
       name="$user.home/.ssh"
       owner="$name"
       group="$user.group"
       mode="755"/>

      <BoundPath
       type="file"
       name="$user.home/.ssh/authorized_keys"
       owner="$name"
       group="$user.group"
       mode="444"
       paranoid="true">${auth_keys(user.key_group)}</BoundPath>
    </py:if>
  </py:for>

</Bundle>

<!-- vim:set expandtab softtabstop=2 shiftwidth=2 textwidth=80: -->
